/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.ner.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Annotation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Annotation\",\"namespace\":\"org.librairy.service.ner.facade.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"text\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"class\",\"type\":{\"type\":\"enum\",\"name\":\"Class\",\"symbols\":[\"ORGANIZATION\",\"LOCATION\",\"PERSON\",\"MISC\",\"MONEY\",\"PERCENT\",\"DATE\",\"TIME\",\"DISEASE\",\"PROTEIN\",\"DRUG\",\"COMPOUND\",\"GENE\"]}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"start\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"end\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"references\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String id;
   private java.lang.String text;
   private org.librairy.service.ner.facade.model.Class class$;
   private java.lang.String type;
   private java.lang.String start;
   private java.lang.String end;
   private java.util.List<java.lang.String> references;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Annotation() {}

  /**
   * All-args constructor.
   */
  public Annotation(java.lang.String id, java.lang.String text, org.librairy.service.ner.facade.model.Class class$, java.lang.String type, java.lang.String start, java.lang.String end, java.util.List<java.lang.String> references) {
    this.id = id;
    this.text = text;
    this.class$ = class$;
    this.type = type;
    this.start = start;
    this.end = end;
    this.references = references;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return text;
    case 2: return class$;
    case 3: return type;
    case 4: return start;
    case 5: return end;
    case 6: return references;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: text = (java.lang.String)value$; break;
    case 2: class$ = (org.librairy.service.ner.facade.model.Class)value$; break;
    case 3: type = (java.lang.String)value$; break;
    case 4: start = (java.lang.String)value$; break;
    case 5: end = (java.lang.String)value$; break;
    case 6: references = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'text' field.
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'class$' field.
   */
  public org.librairy.service.ner.facade.model.Class getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * @param value the value to set.
   */
  public void setClass$(org.librairy.service.ner.facade.model.Class value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'start' field.
   */
  public java.lang.String getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.String value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'end' field.
   */
  public java.lang.String getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(java.lang.String value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'references' field.
   */
  public java.util.List<java.lang.String> getReferences() {
    return references;
  }

  /**
   * Sets the value of the 'references' field.
   * @param value the value to set.
   */
  public void setReferences(java.util.List<java.lang.String> value) {
    this.references = value;
  }

  /** Creates a new Annotation RecordBuilder */
  public static org.librairy.service.ner.facade.model.Annotation.Builder newBuilder() {
    return new org.librairy.service.ner.facade.model.Annotation.Builder();
  }
  
  /** Creates a new Annotation RecordBuilder by copying an existing Builder */
  public static org.librairy.service.ner.facade.model.Annotation.Builder newBuilder(org.librairy.service.ner.facade.model.Annotation.Builder other) {
    return new org.librairy.service.ner.facade.model.Annotation.Builder(other);
  }
  
  /** Creates a new Annotation RecordBuilder by copying an existing Annotation instance */
  public static org.librairy.service.ner.facade.model.Annotation.Builder newBuilder(org.librairy.service.ner.facade.model.Annotation other) {
    return new org.librairy.service.ner.facade.model.Annotation.Builder(other);
  }
  
  /**
   * RecordBuilder for Annotation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Annotation>
    implements org.apache.avro.data.RecordBuilder<Annotation> {

    private java.lang.String id;
    private java.lang.String text;
    private org.librairy.service.ner.facade.model.Class class$;
    private java.lang.String type;
    private java.lang.String start;
    private java.lang.String end;
    private java.util.List<java.lang.String> references;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.ner.facade.model.Annotation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.ner.facade.model.Annotation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.text)) {
        this.text = data().deepCopy(fields()[1].schema(), other.text);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.class$)) {
        this.class$ = data().deepCopy(fields()[2].schema(), other.class$);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.start)) {
        this.start = data().deepCopy(fields()[4].schema(), other.start);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.end)) {
        this.end = data().deepCopy(fields()[5].schema(), other.end);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.references)) {
        this.references = data().deepCopy(fields()[6].schema(), other.references);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Annotation instance */
    private Builder(org.librairy.service.ner.facade.model.Annotation other) {
            super(org.librairy.service.ner.facade.model.Annotation.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.text)) {
        this.text = data().deepCopy(fields()[1].schema(), other.text);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.class$)) {
        this.class$ = data().deepCopy(fields()[2].schema(), other.class$);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.start)) {
        this.start = data().deepCopy(fields()[4].schema(), other.start);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.end)) {
        this.end = data().deepCopy(fields()[5].schema(), other.end);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.references)) {
        this.references = data().deepCopy(fields()[6].schema(), other.references);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'text' field */
    public java.lang.String getText() {
      return text;
    }
    
    /** Sets the value of the 'text' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder setText(java.lang.String value) {
      validate(fields()[1], value);
      this.text = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'text' field has been set */
    public boolean hasText() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'text' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder clearText() {
      text = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'class$' field */
    public org.librairy.service.ner.facade.model.Class getClass$() {
      return class$;
    }
    
    /** Sets the value of the 'class$' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder setClass$(org.librairy.service.ner.facade.model.Class value) {
      validate(fields()[2], value);
      this.class$ = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'class$' field has been set */
    public boolean hasClass$() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'class$' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.String getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder setType(java.lang.String value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'type' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.String getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder setStart(java.lang.String value) {
      validate(fields()[4], value);
      this.start = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'start' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder clearStart() {
      start = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.String getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder setEnd(java.lang.String value) {
      validate(fields()[5], value);
      this.end = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'end' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder clearEnd() {
      end = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'references' field */
    public java.util.List<java.lang.String> getReferences() {
      return references;
    }
    
    /** Sets the value of the 'references' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder setReferences(java.util.List<java.lang.String> value) {
      validate(fields()[6], value);
      this.references = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'references' field has been set */
    public boolean hasReferences() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'references' field */
    public org.librairy.service.ner.facade.model.Annotation.Builder clearReferences() {
      references = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Annotation build() {
      try {
        Annotation record = new Annotation();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.text = fieldSetFlags()[1] ? this.text : (java.lang.String) defaultValue(fields()[1]);
        record.class$ = fieldSetFlags()[2] ? this.class$ : (org.librairy.service.ner.facade.model.Class) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.String) defaultValue(fields()[3]);
        record.start = fieldSetFlags()[4] ? this.start : (java.lang.String) defaultValue(fields()[4]);
        record.end = fieldSetFlags()[5] ? this.end : (java.lang.String) defaultValue(fields()[5]);
        record.references = fieldSetFlags()[6] ? this.references : (java.util.List<java.lang.String>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
